/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define DEFAULT 0
#define RIGHT 2
#define LEFT 1
#define BOTH 3

#define MODTIME 25

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/*
* &mt {
*     tapping-term-ms = <150>;
*     quick_tap_ms = <150>;
* };
*/

/ {
	combos {
        compatible = "zmk,combos";
        combo_enter {
            timeout-ms = <MODTIME>;
            key-positions = <27 28>;
            bindings = <&mt LS(ENTER) ENTER>;
        };
		combo_tab {
            timeout-ms = <MODTIME>;
            key-positions = <11 12>;
            bindings = <&mt LS(TAB) TAB>;
        };
      	combo_ctl_bsp {
            timeout-ms = <MODTIME>;
            key-positions = <26 27>;
            bindings = <&kp LC(BSPC) >;
        };
        combo_end {
            timeout-ms = <MODTIME>;
            key-positions = <17 18>;
            bindings = <&kp END>;
        };
        combo_home {
            timeout-ms = <MODTIME>;
            key-positions = <16 17>;
            bindings = <&kp HOME>;
        };
        combo_super_home {
            timeout-ms = <MODTIME>;
            key-positions = <7 17>;
            bindings = <&kp LC(HOME) >;
        };
        combo_super_end {
            timeout-ms = <MODTIME>;
            key-positions = <17 27>;
            bindings = <&kp LC(END) >;
        };
        combo_next_word {
            timeout-ms = <MODTIME>;
            key-positions = <18 19>;
            bindings = <&kp LC(RIGHT) >;
        };
        combo_prev_word {
            timeout-ms = <MODTIME>;
            key-positions = <15 16>;
            bindings = <&kp LC(END) >;
        };
    };

    behaviors {
        as: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

		// This is a sample keymap intended to be replaced with your own
		base_layer {
			bindings = <
				&as LS(Q) Q     &as LS(W) W     &as LS(F) F     &as LS(P) P    	&as LS(B) B     	&as LS(J) J     	&as LS(L) L     &as LS(U) U    &as LS(Z) Z     &mt LC(G) LC(F)
				&as LS(A) A     &as LS(R) R     &as LS(S) S     &as LS(T) T    	&as LS(G) G     	&as LS(M) M     	&as LS(N) N     &as LS(E) E    &as LS(I) I     &as LS(NON_US_HASH) NON_US_HASH 
				&as LS(Y) Y     &as LS(X) X     &as LS(C) C     &as LS(D) D    	&as LS(V) V     	&as LS(K) K     	&as LS(H) H     &as LS(COMMA) COMMA   &as LS(DOT) DOT    &as LS(O) O
																&lt LEFT SPACE  &mt LCTRL BSPC  			&as LS(FSLH) FSLH 	&lt RIGHT SPACE
			>;
		};
 
		left_layer {
			bindings = <
				&kp SQT     	&kp MINUS     	&kp SEMI     	&kp LBRC    &kp RBKT     	&kp LS(N3)		&kp GRAVE 	    &kp UP     &kp LS(MINUS)    &kp EQUAL
				&kp LSHIFT		&kp LS(N1)     	&kp RA(Q)  		&kp LS(N6)  &kp LS(N5)  	&kp M     		&kp LEFT  		&kp DOWN   	&kp RIGHT     	&kp LS(RBKT)
				&kp LCTRL     	&kp X     		&kp C     		&kp LC(B)   &kp V    		&kp K     		&kp LS(N4)  	&kp RA(E)  	&kp LS(N3)  	 &kp TAB
				                              					&lt LEFT SPACE   	&kp LC(BSPC)  		&as LS(ENTER) ENTER 		&lt BOTH K_APP
			>;
		};


		right_layer {
			bindings = <
				&kp NON_US_BSLH   	&as LS(N2) LS(NON_US_HASH)	&kp RA(N8)    	&kp RA(N9)     			&kp B     		&kp KP_ASTERISK      &kp N7     &kp N8     &kp N9     	&kp KP_MINUS
				&kp RA(NON_US_BSLH) &kp LS(NON_US_BSLH)     	&kp LS(N8)    &kp LS(N9)     			&kp LS(N0)  	&kp KP_SLASH     &kp N4     &kp N5     &kp N6     	&kp KP_PLUS
				&trans     			&trans     			&as NON_US_BSLH LS(N7) 	&as RA(N0) RA(MINUS)	&kp V   		&kp N0 		  	&kp N1     	&kp N2 		&kp N3   	&as KP_COMMA KP_DOT
				                            									&mo BOTH    			&kp LC(BSPC)	 &kp ENTER   &lt RIGHT SPACE
			>;
		}; 

		both_layer {
			bindings = <
				&kp ESC				&trans    	 &kp K_BACK     	&kp K_FORWARD 	&trans		&reset	  		&kp LS(HOME) 		&trans	&kp LS(END)			&mt LC(G) LC(F)
				&kp LS(LA(TAB))		&kp LA(TAB)  &kp LC(Y)     		&kp LC(Z)  	 	&trans		&bt BT_CLR	  	&kp LS(LC(LEFT))	&trans	&kp LS(LC(RIGHT))	&trans
				&kp DELETE			&trans		 &kp LS(LC(TAB))  	&kp LC(TAB)	 	&kp LC(LS(V))	&bt BT_NXT	  	&trans	 			&trans	&trans				&trans
				                									&mo BOTH   		&kp BSPC		&kp ENTER 		&mo BOTH
			>;
		};
	};
};
