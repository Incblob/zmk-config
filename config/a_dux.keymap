/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define MODTIME 23

&mt {
    tapping-term-ms = <200>;
    quick_tap_ms = <150>;
};

/ {
	combos {
        compatible = "zmk,combos";
        combo_enter {
            timeout-ms = <MODTIME>;
            key-positions = <27 28>;
            bindings = <&mt LS(ENTER) ENTER>;
        };
		combo_tab {
            timeout-ms = <MODTIME>;
            key-positions = <1 2>;
            bindings = <&mt LS(TAB) TAB>;
        };
      	combo_ctl_bsp {
            timeout-ms = <MODTIME>;
            key-positions = <11 12>;
            bindings = <&kp LC(BSPC) >;
        };
        combo_end {
            timeout-ms = <MODTIME>;
            key-positions = <17 18>;
            bindings = <&kp END>;
        };
        combo_home {
            timeout-ms = <MODTIME>;
            key-positions = <16 17>;
            bindings = <&kp HOME>;
        };
        combo_next_word {
            timeout-ms = <MODTIME>;
            key-positions = <9 18>;
            bindings = <&kp LC(RIGHT) >;
        };
        combo_prev_word {
            timeout-ms = <MODTIME>;
            key-positions = <15 16>;
            bindings = <&kp LC(LEFT) >;
        };
    };

    behaviors {
 		as: auto_shift {
                compatible = "zmk,behavior-hold-tap";
                label = "AUTO_SHIFT";
                #binding-cells = <2>;
                tapping_term_ms = <170>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
                hold-trigger-key-positions = <32>;

            };
    };

	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
				&as LS(Q) Q     &as LS(W) W     &as LS(F) F     &as LS(P) P     &as LS(B) B     	&as LS(J) J       &as LS(L) L     &as LS(U) U   	&as LS(Z) Z              &as LS(NON_US_HASH) NON_US_HASH 
                &as LS(A) A     &as LS(R) R     &as LS(S) S     &as LS(T) T     &as LS(G) G         &as LS(M) M         &as LS(N) N     &as LS(E) E    &as LS(I) I              &as LS(O) O
                &as LS(Y) Y     &as LS(X) X     &as LS(C) C     &as LS(D) D     &as LS(V) V         &as LS(K) K         &as LS(H) H     &as LS(COMMA) COMMA   &as LS(DOT) DOT    &mt LCTRL LC(F)
									  &lt 1 SPACE	&kp BSPC	 &as LS(FSLH)	FSLH &lt 2 SPACE
			>;
		};
 
		left_layer {
			bindings = <
				&as LS(SQT) SQT &as LS(MINUS) MINUS     &as LS(SEMI) SEMI   &as LS(LBKT) LBKT   &kp RA(RBKT)    &kp LS(N3)		&kp GRAVE 	    &kp UP     &kp LS(MINUS)    &kp EQUAL
				&kp LSHIFT		&kp LS(N1)     			&kp RA(Q)  			&kp LS(N6)  		&kp LS(N5)  	&trans     		&kp LEFT  		&kp DOWN   	&kp RIGHT     	&kp LS(RBKT)
				&kp LCTRL     	&trans     				&trans     			&kp LC(B)   		&trans    		&trans     		&kp LS(N4)  	&kp RA(E)  	&kp LS(N3)  	 &kp TAB
				                              								&lt 1 SPACE		&kp LC(BSPC)		&kp LALT	&lt 3 K_APP
			>;
		};


		right_layer {
			bindings = <
				&kp NON_US_BSLH   	&as LS(N2) LS(NON_US_HASH)	&kp RA(N8)    	&kp RA(N9)     			&none     		&kp KP_ASTERISK     &kp N7     &kp N8     	&kp N9     	&kp KP_MINUS
				&kp RA(NON_US_BSLH) &kp LS(NON_US_BSLH)     	&kp LS(N8)    &kp LS(N9)     			&kp LS(N0)  	&kp KP_SLASH     	&kp N4     &kp N5     	&kp N6     	&kp KP_PLUS
				&none     			&none     			&as RA(N7) RA(MINUS) 	&as RA(N0) LS(N7) 		&none  			&kp N0 		  		&kp N1     &kp N2 		&kp N3   	&as COMMA DOT
				                            									&mo 3 					&kp DELETE		&kp ENTER   	&mo 2
			>;
		}; 

		both_layer {
			bindings = <

				&kp ESC				&none    	&kp K_BACK     		&kp K_FORWARD 	&none			&none	  		&kp LS(HOME) 		&kp LC(HOME)	&kp LS(END)			&mt LC(G) LC(F)
				&non				&none  		&kp LC(Y)     		&kp LC(Z)  	 	&none			&bt BT_CLR	  	&kp LS(LC(LEFT))	&kp LC(END)		&kp LS(LC(RIGHT))	&none
				&kp DELETE			&none		&kp LS(LC(TAB))  	&kp LC(TAB)	 	&kp LC(LS(V))	&bt BT_NXT	  	&bt BT_SEL 0	 	&bt BT_SEL 1	&bt BT_SEL 2		&bt BT_SEL 3
				                									&mo 3 			&kp BSPC		&kp ENTER 		&mo 3 

			>;
		};
	};
};
